AWSTemplateFormatVersion: 2010-09-09

Parameters:
  Vpc:
    Type: AWS::EC2::VPC::Id
  Subnet1:
    Type: AWS::EC2::Subnet::Id
  Subnet2:
    Type: AWS::EC2::Subnet::Id

Resources:
  # ALB Security Group
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP access to ALB
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  # ECS Task Security Group
  ECSTaskSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow traffic from ALB to ECS task
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSecurityGroup

  MyALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: alb
      Scheme: internet-facing
      Subnets:
        - !Ref Subnet1
        - !Ref Subnet2
      Type: application
      SecurityGroups:
        - !Ref ALBSecurityGroup

  MyListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref MyALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref BlueTG

  BlueTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: blue
      Port: 80
      Protocol: HTTP
      VpcId: !Ref Vpc
      TargetType: ip
      HealthCheckPath: /

  GreenTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: green
      Port: 80
      Protocol: HTTP
      VpcId: !Ref Vpc
      TargetType: ip
      HealthCheckPath: /

  MyCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: app-cluster

  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ecs-task-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  BlueTaskDef:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: app-blue
      Cpu: '256'
      Memory: '512'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: app
          Image: nginxdemos/hello:latest
          Essential: true
          PortMappings:
            - ContainerPort: 80

  GreenTaskDef:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: app-green
      Cpu: '256'
      Memory: '512'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: app
          Image: nginxdemos/hello:latest
          Essential: true
          PortMappings:
            - ContainerPort: 80

  MyECSService:
    Type: AWS::ECS::Service
    DependsOn:
      - MyALB
      - MyListener
      - BlueTG
    Properties:
      ServiceName: app-svc
      Cluster: !Ref MyCluster
      DesiredCount: 1
      LaunchType: FARGATE
      DeploymentController:
        Type: CODE_DEPLOY
      TaskDefinition: !Ref BlueTaskDef
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref Subnet1
            - !Ref Subnet2
          SecurityGroups:
            - !Ref ECSTaskSecurityGroup
      LoadBalancers:
        - ContainerName: app
          ContainerPort: 80
          TargetGroupArn: !Ref BlueTG

  MyCodeDeployApp:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: app-cd
      ComputePlatform: ECS

  CodeDeployServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: codedeploy-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codedeploy.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodeDeployECSInlinePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ecs:DescribeServices
                  - ecs:CreateTaskSet
                  - ecs:UpdateServicePrimaryTaskSet
                  - ecs:DeleteTaskSet
                  - elasticloadbalancing:DescribeTargetGroups
                  - elasticloadbalancing:DescribeListeners
                  - elasticloadbalancing:ModifyListener
                  - elasticloadbalancing:DescribeRules
                  - elasticloadbalancing:ModifyRule
                  - lambda:InvokeFunction
                  - cloudwatch:DescribeAlarms
                  - sns:Publish
                  - s3:GetObject
                  - s3:GetObjectVersion
                Resource: '*'
              - Effect: Allow
                Action: iam:PassRole
                Resource: '*'
                Condition:
                  StringLike:
                    iam:PassedToService: ecs-tasks.amazonaws.com

  MyCodeDeployGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      DeploymentGroupName: app-cd-group
      ApplicationName: !Ref MyCodeDeployApp
      DeploymentConfigName: CodeDeployDefault.ECSAllAtOnce
      ServiceRoleArn: !GetAtt CodeDeployServiceRole.Arn
      DeploymentStyle:
        DeploymentType: BLUE_GREEN
        DeploymentOption: WITH_TRAFFIC_CONTROL
      BlueGreenDeploymentConfiguration:
        TerminateBlueInstancesOnDeploymentSuccess:
          Action: TERMINATE
          TerminationWaitTimeInMinutes: 5
        DeploymentReadyOption:
          ActionOnTimeout: CONTINUE_DEPLOYMENT
          WaitTimeInMinutes: 0
      ECSServices:
        - ServiceName: !GetAtt MyECSService.Name
          ClusterName: !Ref MyCluster
      LoadBalancerInfo:
        TargetGroupPairInfoList:
          - TargetGroups:
              - Name: blue
              - Name: green
            ProdTrafficRoute:
              ListenerArns:
                - !Ref MyListener

Outputs:
  LoadBalancerArn:
    Description: Application Load Balancer ARN
    Value: !Ref MyALB

  LoadBalancerDNSName:
    Description: Public URL to access the nginx demo page
    Value: !GetAtt MyALB.DNSName

  ListenerArn:
    Description: ALB Listener ARN used for production traffic
    Value: !Ref MyListener

  TargetGroupBlueArn:
    Description: Blue Target Group ARN
    Value: !Ref BlueTG

  TargetGroupGreenArn:
    Description: Green Target Group ARN
    Value: !Ref GreenTG

  ECSServiceName:
    Description: ECS Service Name
    Value: !GetAtt MyECSService.Name

  ECSClusterName:
    Description: ECS Cluster Name
    Value: !Ref MyCluster

  CodeDeployApplicationName:
    Description: CodeDeploy Application Name
    Value: !Ref MyCodeDeployApp

  CodeDeployDeploymentGroupName:
    Description: CodeDeploy Deployment Group Name
    Value: !Ref MyCodeDeployGroup

  TaskExecutionRoleArn:
    Description: ECS Task Execution Role ARN
    Value: !GetAtt TaskExecutionRole.Arn